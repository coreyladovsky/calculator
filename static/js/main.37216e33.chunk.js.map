{"version":3,"sources":["components/Display.js","components/Button.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Display","num","className","length","str","Number","toExponential","toString","output","plusIdx","indexOf","encounterPlus","i","slice","isInteger","commas","Math","abs","toLocaleString","format","Button","sym","handleClick","classStyle","activeSym","id","onClick","defaultSate","displayValue","previousValue","operation","waitingForNewValue","justEval","usedDecimal","justCleared","Calculator","state","handleClear","nextState","setState","handleNumber","prevState","resetJusts","useDecimal","flipSign","percent","evaluate","display","doMath","isNaN","operand","parseFloat","prev","Decimal","times","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37216e33.chunk.js","sourcesContent":["import React from 'react';\nimport \"../css/Display.css\";\n\nconst Display = ({num}) => {\n    const  format = (num) =>{\n        if(num.length > 10) {\n            let str =  Number(num).toExponential(9).toString();\n            let output = \"\";\n            const plusIdx = str.indexOf(\"+\");\n\n            let encounterPlus = true;\n\n            for(let i = plusIdx - 2; i >= 0; i--) {\n                if(str[i] === \"0\" && encounterPlus) {\n                    continue \n                } else {\n                    encounterPlus = false;\n                    output = str[i]  + output;\n                }\n            \n            }\n            if(output.length) {\n                return output + \"e\" +str.slice(plusIdx + 1);\n            } else {\n                return str\n            }\n        }\n        if(!Number.isInteger(Number(num)) || num[num.length - 1] === \".\") {\n            return num; \n        }\n\n        let commas = Math.abs(num).toLocaleString();\n        return Number(num) < 0 ? \"-\" + commas : commas\n\n    }  \n    return(\n        <div className={\"display\"}>{format(num)}</div>\n    )\n}\n\nexport default Display;","import React from 'react';\nimport \"../css/Button.css\"\nconst Button = ({sym, handleClick, classStyle, activeSym}) => {    \n    return(\n        <button className={\"Button \" + classStyle} id={sym === activeSym ? \"active\" : null} onClick={() => handleClick(sym)}>\n            {sym}\n        </button>\n    )\n}\n\nexport default Button","import React, { Component } from 'react';\nimport Display from './Display';\nimport Button from './Button';\nimport \"../css/Calculator.css\";\nimport * as Decimal from 'decimal.js';\n\nconst defaultSate = {\n        displayValue: '0',\n        previousValue: null,\n        operation: null,\n        waitingForNewValue: false,\n        justEval: false,\n        usedDecimal: false, \n        justCleared: true\n    }\n\nclass Calculator extends Component {\n    state = {...defaultSate}\n\n    handleClear = (sym) => {\n        const nextState = sym === \"C\" ?\n             {displayValue: \"0\", usedDecimal: false, justCleared: true }\n            : defaultSate\n        this.setState(nextState)\n    }\n\n    handleNumber = (num) => {\n        if(this.state.waitingForNewValue) {\n            this.setState((prevState) => ({\n                    previousValue: prevState.displayValue, \n                    displayValue: num, \n                    waitingForNewValue: false,\n                    justCleared: false          \n            }))\n        } else {\n            if(this.state.displayValue.length === 9) return;\n            this.setState((prevState) => {\n                const resetJusts = { justCleared: false, justEval: false };\n                if(prevState.displayValue === \"0\" || this.state.justEval) {\n                    return {displayValue: num, ...resetJusts}\n                } else {\n                    return {displayValue: prevState.displayValue + num, ...resetJusts}\n                }\n            });\n        }\n    }\n\n    useDecimal = () => {\n        if(this.state.usedDecimal)return; \n        if(this.state.waitingForNewValue || this.state.justEval) {\n            this.setState((prevState) => {\n                return {\n                    previousValue: prevState.displayValue, \n                    displayValue: \"0.\", \n                    waitingForNewValue: false,\n                    usedDecimal: true,\n                    justEval: false,\n                    justCleared: false\n                }\n            })\n        } else {\n            this.setState((prevState) => ({\n                    displayValue: prevState.displayValue + \".\", \n                    usedDecimal: true,\n                    justCleared: false\n            }))\n        }\n\n    }\n\n    flipSign = () => {\n        this.setState((prevState) => ({\n                displayValue: prevState.displayValue * -1,\n        }))\n    }\n\n    percent = () => {\n        this.setState((prevState) => ({\n            displayValue: (prevState.displayValue / 100).toString()\n        }))\n    }\n\n    evaluate = () => {\n        if(this.state.operation) {\n            let display = this.doMath(this.state.operation);\n            this.setState({\n                displayValue: isNaN(display) ? this.state.displayValue : display.toString(),\n                previousValue: this.state.justEval ? this.state.previousValue: this.state.displayValue,\n                justEval: true,\n                usedDecimal: false,\n                justCleared: false\n            })\n        }        \n    }\n\n    operation = (operand) => {\n        const { operation, justEval} = this.state; \n        if(operation && !justEval) {\n            let display = this.doMath(operand);\n            if(isNaN(display)) {\n                this.setState({operation: operand, usedDecimal: false})\n                return\n            } \n            this.setState({displayValue: display.toString()})\n        }\n        this.setState((prevState) => ({\n            operation: operand, \n            usedDecimal: false,\n            waitingForNewValue: true,\n            previousValue: prevState.displayValue,\n            justEval: false,\n        }))\n    }\n\n    doMath = (operation = this.state.operation,\n             displayValue=this.state.displayValue, \n             previousValue = this.state.previousValue) => {\n        const display = parseFloat(displayValue) \n        const prev = parseFloat(previousValue)\n        switch (operation) {\n            case \"+\":\n                return Decimal.add(display, prev)       \n            case \"-\": \n                if(this.state.justEval) {\n                    return Decimal.sub(display, prev)\n                }\n                return Decimal.sub(prev, display)\n            case \"x\": \n                return new Decimal(prev).times(display)\n            case \"÷\":\n              if(this.state.justEval) {\n                  return Decimal.div(display, prev)\n                }\n                return Decimal.div(prev, display)\n            default:\n               break;\n        }\n    }\n\n    render() {                           \n        const { displayValue, justCleared, waitingForNewValue, operation, justEval } = this.state; \n        let activeSym;\n        if( waitingForNewValue) {\n             activeSym = justEval || operation\n        }\n    \n        return (\n        <div className=\"calculator\">\n            <Display num={displayValue}/>\n            <Button sym={justCleared ? \"AC\" : \"C\"} handleClick={this.handleClear} classStyle={\"topBar\"}/>\n            <Button sym={\"±\"} handleClick={this.flipSign} classStyle={\"topBar\"} />\n            <Button sym={\"%\"} handleClick={this.percent} classStyle={\"topBar\"}/>\n            <Button sym={\"÷\"} handleClick={this.operation} classStyle={\"operand\"} activeSym={activeSym}/>\n            <Button sym={'7'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'8'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'9'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'x'} handleClick={this.operation}  classStyle={\"operand\"} activeSym={activeSym}/>\n            <Button sym={'4'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'5'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'6'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={\"-\"} handleClick={this.operation}  classStyle={\"operand\"} activeSym={activeSym}/>\n            <Button sym={'1'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'2'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={'3'} handleClick={this.handleNumber} classStyle={\"regNum\"}/>\n            <Button sym={\"+\"} handleClick={this.operation}  classStyle={\"operand\"} activeSym={activeSym}/>\n            <Button sym={'0'} handleClick={this.handleNumber} classStyle={\"regNum zero\"}/>\n            <Button sym={'.'} handleClick={this.useDecimal} classStyle={\"regNum\"}/>\n            <Button sym={'='} handleClick={this.evaluate}  classStyle={\"operand\"} activeSym={activeSym}/>\n        </div>  );\n    }\n}\n \nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Caculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Caculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}